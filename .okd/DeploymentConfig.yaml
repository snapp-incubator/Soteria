apiVersion: v1
kind: Template
metadata:
  name: ${SERVICE_NAME}-deployment-config
objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${SERVICE_NAME}
      name: ${SERVICE_NAME}
    spec:
      selector:
        app: ${SERVICE_NAME}
      strategy:
        rollingParams:
          intervalSeconds: 1
          maxSurge: 5
          maxUnavailable: 0
          timeoutSeconds: 600
          updatePeriodSeconds: 10
        type: Rolling
      template:
        metadata:
          annotations:
            prometheus.io/scrape: "${METRICS_ENABLED}"
            prometheus.io/path: "/metrics"
            prometheus.io/port: "9999"
          labels:
            app: ${SERVICE_NAME}
        spec:
          containers:
            - name: ${SERVICE_NAME}-app
              image: "docker-registry.default.svc:5000/${APP_IMAGE}"
              imagePullPolicy: Always
              ports:
                - containerPort: 9999
                  protocol: TCP
                - containerPort: 50051
                  protocol: TCP
              resources:
                limits:
                  memory: "${MEMORY_LIMIT}"
                  cpu: "${CPU_LIMIT}"
                requests:
                  memory: "${MEMORY_REQUEST}"
                  cpu: "${CPU_REQUEST}"
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 10
                periodSeconds: 23
                successThreshold: 1
                tcpSocket:
                  port: 9999
                timeoutSeconds: 2
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 10
                periodSeconds: 29
                successThreshold: 1
                tcpSocket:
                  port: 9999
                timeoutSeconds: 2
              envFrom:
                - secretRef:
                    name: "${SERVICE_NAME}-auth-env"
                - configMapRef:
                    name: "${SERVICE_NAME}-env"
              env:
                - name: HTTP_PROXY
                - name: HTTPS_PROXY
              volumeMounts:
                - name: "${SERVICE_NAME}-jwt-keys"
                  mountPath: "/jwt_pems/100.private.pem"
                  subPath: 100.private.pem
                  readOnly: true
                - name: "${SERVICE_NAME}-jwt-keys"
                  mountPath: "/jwt_pems/100.pem"
                  subPath: 100.pem
                  readOnly: true
                - name: "${SERVICE_NAME}-jwt-keys"
                  mountPath: "/jwt_pems/1.pem"
                  subPath: 1.pem
                  readOnly: true
                - name: "${SERVICE_NAME}-jwt-keys"
                  mountPath: "/jwt_pems/0.pem"
                  subPath: 0.pem
                  readOnly: true
          volumes:
            - name: "${SERVICE_NAME}-jwt-keys"
              secret:
                secretName: "${SERVICE_NAME}-jwt-keys"
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
      triggers: []
parameters:
  - name: APP_IMAGE
    displayName: Application Docker Image
    description: application will pull and run this docker image. It has to be in Snapp Cloud registery
    value: "$CONTAINER_REGISTRY_IMAGE"
  - name: SERVICE_NAME
    displayName: Service name
    description: The name of the application (should be unique in the namespace)
  - name: MEMORY_LIMIT
    value: "512Mi"
  - name: MEMORY_REQUEST
    value: "512Mi"
  - name: CPU_LIMIT
    value: "2"
  - name: CPU_REQUEST
    value: "1"
  - name: METRICS_ENABLED
    value: "true"
    displayName: Metrics Endpoint?
    description: /metrics endpoint will be available for Prometheus
